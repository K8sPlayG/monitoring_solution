apiVersion: v1
kind: ConfigMap
metadata:
  name: stress-test-script
  namespace: monitoring
data:
  stress.sh: |
    #!/bin/sh
    # Script to create predictable CPU and memory patterns
    # for Alpine Linux with stress-ng

    # Helper functions for logging
    log_info() {
      echo "[$(date +"%Y-%m-%d %H:%M:%S")] [INFO] $1"
    }

    log_error() {
      echo "[$(date +"%Y-%m-%d %H:%M:%S")] [ERROR] $1" >&2
    }

    # Check if stress-ng is installed
    if ! command -v stress-ng > /dev/null 2>&1; then
      log_error "stress-ng not found, please install it first"
      exit 1
    fi

    log_info "Starting stress patterns for Prometheus monitoring..."

    # Run forever
    while true; do
      log_info "Starting CPU ramp-up phase"

      # CPU ramp-up: gradually increase load over 60 seconds
      for i in 1 2 3 4; do
        # Use stress-ng to consume CPU with increasing workers
        log_info "CPU load at $i workers"
        stress-ng --cpu $i --timeout 15 --metrics-brief 2>&1 | grep "stress-ng:" &
        PID=$!
        wait $PID || log_error "CPU stress failed with exit code $?"
      done

      log_info "Starting memory ramp-up phase"

      # Memory ramp-up: gradually allocate and free memory
      for i in 1 2 3; do
        # Allocate varying amounts of memory (in MB)
        MEM_MB=$((i * 50))
        log_info "Allocating ${MEM_MB}MB of memory"
        stress-ng --vm 1 --vm-bytes ${MEM_MB}M --timeout 20 --metrics-brief 2>&1 | grep "stress-ng:" &
        PID=$!
        wait $PID || log_error "Memory stress failed with exit code $?"
      done

      log_info "Cool down period - sleeping for 30 seconds"
      sleep 30
    done

  prom-exporter.py: |
    #!/usr/bin/env python3
    # Simple Prometheus metrics exporter for stress testing

    import http.server
    import socketserver
    import time
    import os
    import subprocess
    import psutil
    import threading

    # Global metrics
    metrics = {
        "cpu_usage_percent": 0,
        "memory_usage_bytes": 0,
        "start_time": time.time()
    }

    # Update metrics in background
    def update_metrics():
        while True:
            try:
                metrics["cpu_usage_percent"] = psutil.cpu_percent()
                metrics["memory_usage_bytes"] = psutil.Process(os.getpid()).memory_info().rss
            except Exception as e:
                print(f"Error updating metrics: {e}")
            time.sleep(1)

    # Start background thread
    threading.Thread(target=update_metrics, daemon=True).start()

    # HTTP server for metrics endpoint
    class MetricsHandler(http.server.BaseHTTPRequestHandler):
        def do_GET(self):
            if self.path == '/metrics':
                self.send_response(200)
                self.send_header('Content-type', 'text/plain')
                self.end_headers()

                # Generate Prometheus metrics
                output = ""
                output += f"# HELP stress_test_uptime_seconds Uptime of the stress test in seconds\n"
                output += f"# TYPE stress_test_uptime_seconds counter\n"
                output += f"stress_test_uptime_seconds {time.time() - metrics['start_time']}\n"

                output += f"# HELP stress_test_cpu_usage_percent Current CPU usage percent\n"
                output += f"# TYPE stress_test_cpu_usage_percent gauge\n"
                output += f"stress_test_cpu_usage_percent {metrics['cpu_usage_percent']}\n"

                output += f"# HELP stress_test_memory_usage_bytes Current memory usage in bytes\n"
                output += f"# TYPE stress_test_memory_usage_bytes gauge\n"
                output += f"stress_test_memory_usage_bytes {metrics['memory_usage_bytes']}\n"

                self.wfile.write(output.encode())
            else:
                self.send_response(404)
                self.end_headers()

    # Run HTTP server
    httpd = socketserver.TCPServer(('', 8000), MetricsHandler)
    print("Server started at localhost:8000")
    httpd.serve_forever()

  start.sh: |
    #!/bin/sh
    echo "Installing system dependencies..."
    apk update &&
      apk add --no-cache \
        stress-ng \
        build-base \
        gcc \
        linux-headers
    pip install --no-cache-dir psutil
    echo "Starting stress test script..."
    /scripts/stress.sh &
    echo "Waiting for stress test to initialize..."
    sleep 5
    echo "Starting metrics exporter..."
    which python3
    python3 /scripts/prom-exporter.py
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: stress-demo
  namespace: monitoring
  labels:
    app: stress-demo
spec:
  replicas: 1
  selector:
    matchLabels:
      app: stress-demo
  template:
    metadata:
      labels:
        app: stress-demo
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
    spec:
      containers:
        - name: stress-test
          image: python:3.12-alpine
          command: ["/scripts/start.sh"]
          resources:
            limits:
              cpu: 500m
              memory: 300Mi
            requests:
              cpu: 100m
              memory: 100Mi
          ports:
            - containerPort: 8000
              name: metrics
          volumeMounts:
            - name: scripts
              mountPath: /scripts
      volumes:
        - name: scripts
          configMap:
            name: stress-test-script
            defaultMode: 0777
---
apiVersion: v1
kind: Service
metadata:
  name: stress-demo
  namespace: monitoring
spec:
  selector:
    app: stress-demo
  ports:
    - port: 8000
      targetPort: 8000
      name: metrics
