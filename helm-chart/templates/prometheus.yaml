apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus
  namespace: {{ .Values.namespace }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus
rules:
  - apiGroups: [""]
    resources:
      - nodes
      - nodes/proxy
      - nodes/metrics # Add this to grant access to node metrics
      - services
      - endpoints
      - pods
    verbs: ["get", "list", "watch"]
  - apiGroups:
      - extensions
    resources:
      - ingresses
    verbs: ["get", "list", "watch"]
  - nonResourceURLs: ["/metrics"]
    verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus
subjects:
  - kind: ServiceAccount
    name: prometheus
    namespace: {{ .Values.namespace }}
# ---
# apiVersion: v1
# kind: PersistentVolumeClaim
# metadata:
#   name: prometheus-data
#   namespace: {{ .Values.namespace }}
# spec:
#   accessModes:
#     - ReadWriteOnce
#   resources:
#     requests:
#       storage: 5Gi
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: {{ .Values.namespace }}
data:
  prometheus.yml: |
    global:
      scrape_interval: 2s
      evaluation_interval: 2s
      # scrape_interval: 15s
      # evaluation_interval: 15s
      external_labels:
        monitor: 'k8s-monitor'

    scrape_configs:
      # Self-monitoring - Prometheus scrapes its own metrics
      - job_name: 'prometheus'
        static_configs:
          - targets: ['localhost:9090']

      # Pod-based metrics collection
      # This job discovers and scrapes individual pods with prometheus.io/scrape annotation
      - job_name: 'kubernetes-pods'
        kubernetes_sd_configs:
          - role: pod
        relabel_configs:
          # NAMESPACE FILTERING: Only scrape pods in the correct namespace
          - source_labels: [__meta_kubernetes_namespace]
            action: keep
            regex: {{ .Values.namespace }}

          # ANNOTATION FILTERING: Only scrape pods with prometheus.io/scrape=true
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
            action: keep
            regex: true

          # PATH CONFIGURATION: Use custom metrics path if specified in annotation
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
            action: replace
            target_label: __metrics_path__
            regex: (.+)

          # PORT CONFIGURATION: Use custom port if specified in annotation
          - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
            action: replace
            regex: ([^:]+)(?::\d+)?;(\d+)
            replacement: $1:$2
            target_label: __address__

          # METADATA ENRICHMENT: Add pod labels as Prometheus labels
          - action: labelmap
            regex: __meta_kubernetes_pod_label_(.+)

          # METADATA ENRICHMENT: Add namespace as label
          - source_labels: [__meta_kubernetes_namespace]
            action: replace
            target_label: kubernetes_namespace

          # METADATA ENRICHMENT: Add pod name as label
          - source_labels: [__meta_kubernetes_pod_name]
            action: replace
            target_label: kubernetes_pod_name

      # Service-based metrics collection
      # This job discovers and scrapes services with prometheus.io/scrape annotation
      - job_name: 'kubernetes-service-endpoints'
        kubernetes_sd_configs:
          - role: endpoints
        relabel_configs:
          # NAMESPACE FILTERING: Only scrape services in the correct namespace
          - source_labels: [__meta_kubernetes_namespace]
            action: keep
            regex: {{ .Values.namespace }}

          # ANNOTATION FILTERING: Only scrape services with prometheus.io/scrape=true
          - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
            action: keep
            regex: true

          # PATH CONFIGURATION: Use custom metrics path if specified in annotation
          - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
            action: replace
            target_label: __metrics_path__
            regex: (.+)

          # PORT CONFIGURATION: Use custom port if specified in annotation
          - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
            action: replace
            regex: ([^:]+)(?::\d+)?;(\d+)
            replacement: $1:$2
            target_label: __address__

          # METADATA ENRICHMENT: Add service labels as Prometheus labels
          - action: labelmap
            regex: __meta_kubernetes_service_label_(.+)

          # METADATA ENRICHMENT: Add namespace as label
          - source_labels: [__meta_kubernetes_namespace]
            action: replace
            target_label: kubernetes_namespace

          # METADATA ENRICHMENT: Add service name as label
          - source_labels: [__meta_kubernetes_service_name]
            action: replace
            target_label: kubernetes_name

      #For grabbing cpu/memory usage
      - job_name: 'kubelet'
        metrics_path: '/metrics/resource' # Path to scrape kubelet metrics
        scheme: 'https'
        kubernetes_sd_configs:
          - role: node
        tls_config:
          insecure_skip_verify: true # Use this if kubelet uses self-signed certificates
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token

        relabel_configs:
          #NOTE: there is nothing in here because the relabel configs
          # only considers labels that the job exposes (and it doesn't
          # expose namespace, etc labels. What we really want it to
          # filter by the attributes of particular statistics;
          # this what the metric_relabel_configs is for.

        #Filter out unwanted stats.
        #Stats look like this:
        #pod_memory_working_set_bytes{namespace="rob-monitor",pod="golang-app"}
        #You can see these via:
        # kubectl get --raw /api/v1/nodes/gauss/proxy/metrics/resource
        metric_relabel_configs:
          # Keep metrics only from the specified namespace
          - source_labels: ['namespace']
            regex: {{ .Values.namespace }}
            action: keep

          # Drop metrics that don't include "cpu" or "memory" in the name
          - source_labels: ['__name__']
            regex: '.*(cpu|memory).*'
            action: keep

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: {{ .Values.namespace }}
  labels:
    app: prometheus
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      terminationGracePeriodSeconds: 0
      serviceAccountName: prometheus
      securityContext:
        fsGroup: 65534
        runAsGroup: 65534
        runAsNonRoot: true
        runAsUser: 65534
      containers:
        - name: prometheus
          image: {{ .Values.prometheus_config.image }}
          imagePullPolicy: {{ .Values.prometheus_config.pullPolicy }}
          args:
            - "--config.file=/etc/prometheus/prometheus.yml"
            - "--storage.tsdb.path=/prometheus"
            - "--storage.tsdb.retention.time=15d"
            - "--web.console.libraries=/etc/prometheus/console_libraries"
            - "--web.console.templates=/etc/prometheus/consoles"
            - "--web.enable-lifecycle"
            # - "--log.level=debug"
          ports:
            - containerPort: 9090
              name: web
          readinessProbe:
            httpGet:
              path: /-/ready
              port: 9090
            initialDelaySeconds: 5
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: /-/healthy
              port: 9090
            initialDelaySeconds: 15
            periodSeconds: 20
          resources:
            limits:
              cpu: 500m
              memory: 1Gi
            requests:
              cpu: 200m
              memory: 500Mi
          volumeMounts:
            - name: config-volume
              mountPath: /etc/prometheus
            - name: prometheus-data
              mountPath: /prometheus
      volumes:
        - name: config-volume
          configMap:
            name: prometheus-config
        - name: prometheus-data
          emptyDir: {}
          # persistentVolumeClaim:
          #   claimName: prometheus-data
---
apiVersion: v1
kind: Service
metadata:
  name: prometheus
  namespace: {{ .Values.namespace }}
  # annotations:
  #   prometheus.io/scrape: "true"
  #   prometheus.io/port: "9090"
spec:
  selector:
    app: prometheus
  ports:
    - port: 9090
      targetPort: 9090
      name: web
  type: ClusterIP
